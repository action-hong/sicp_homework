(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (variable? x)
  (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2)
  ; 修改表示, 即可在不修改deriv的前提下完成多项的求导
  (list `+ a1 a2))
(define (make-product m1 m2)
  (list `* m1 m2))
(define (sum? x)
  (and (pair? x) (eq? (car x) `+)))
(define (addend x)
  (if (null? (cdr x))
    0
    (cadr x))
(define (augend x)
  (if (null? (cddr x))
    0
    (cons `+ (cddr x)))
(define (product? x)
  (and (pair? x) (eq? (car x) `*)))
(define (multiplier x)
  (if (null? (cdr x))
    1
    (cadr x))
(define (multiplicand x)
  (if (null? (cddr x))
    1
    (cons `* (cddr x)))
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) `**)))
(define (base x)
  (cadr x))
(define (exponent x)
  (caddr x))
(define (make-exponentiation base exponent)
  (cond ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        (else (list `** base exponent)))
)

(define (deriv exp var)
  (cond ((number? exp) 0)
         ((variable? exp)
          (if (same-variable? exp var) 1 0))
         ((sum? exp)
          (make-sum (deriv (addend exp) var)
                    (deriv (augend exp) var)))
         ((product? exp)
          (make-sum
            (make-product (multiplier exp)
                          (deriv (multiplicand exp) var))
            (make-product (multiplicand exp)
                          (deriv (multiplier exp) var))))
         ((exponentiation? exp)
          (make-product (exponent exp)
                        (make-exponentiation (base exp)
                                             (- (exponent exp) 1))))
         (else
          (error "unknow expression type -- DERIV" exp))))

; 基于抽象数据表述
; 无论导数表达式如何表示, 只需实现正确的选择函数和构造函数, 即可工作

(display (deriv `(* x y (+ x 3)) `x))
; (+ (* x (+ (* y (+ (* (+ x 3) 0) (* 1 (+ 1 (+ 0 0))))) (* (* (+ x 3)) 0))) (* (* y (+ x 3)) 1))
; 化简  (+ (* x y) (* y (+ x 3)))

