(define (entry tree)
  (car tree))
(define (left-branch tree)
  (cadr tree))
(define (right-branch tree)
  (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= (entry tree) x) #t)
        ((< (entry tree) x) (element-of-set? x (left-branch set)))
        (else (element-of-set? x (right-branch set)))
        ))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x `() `()))
         ((= x (car set)) set)
         ((< x (car set)) (make-tree (entry set) 
                                     (adjoin-set x (left-branch set))
                                     (right-branch set)))
         ((> x (car set)) (make-tree (entry set)
                                     (left-branch set)
                                     (adjoin-set x (right-branch set))))
         ))